name: SpringPremier CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
concurrency:
  group: beanstalk-deploy
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃
      - uses: actions/checkout@v3

      # 2. Java 설정
      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'

      # 3. gradlew 권한 + 빌드
      - run: chmod +x gradlew
      - run: ./gradlew clean build -x test

      # 4. 현재 시간 가져오기
      - name: Get current time
        uses: josStorer/get-current-time@v2.0.2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      # 5. 배포 패키지 경로
      - name: Set artifact name
        run: |
          FILE=$(ls ./build/libs/*.jar | head -n 1)
          echo "artifact=$(basename $FILE)" >> $GITHUB_ENV

      #      - name: Install AWS CLI
      #        run: |
      #          python3 -m pip install --upgrade pip
      #          pip install awscli --upgrade --user
      #          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # 6. AWS 자격증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      #      - name: Install AWS CLI v2
      #        run: |
      #          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #          unzip awscliv2.zip
      #          sudo ./aws/install
      #
      #      - name: Install AWS CLI
      #        run: |
      #          sudo apt-get update
      #          sudo apt-get install -y awscli

      # 7. 초기 배포 여부 체크
      - name: Check if initial deployment
        id: check_initial
        run: |
          VERSION=$(aws elasticbeanstalk describe-environments \
            --environment-names MissionSpringPremierenv-env \
            --query "Environments[0].VersionLabel" \
            --output text)
          if [[ "$VERSION" == "None" ]]; then
            echo "initial=true" >> $GITHUB_OUTPUT
          else
            echo "initial=false" >> $GITHUB_OUTPUT
          fi

      #      - name: Set EB environment variables
      #        if: github.ref == 'refs/heads/main'
      #        run: |
      #          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> $GITHUB_ENV
      #          echo "SPRING_SECURITY_USER_NAME=${{ secrets.SPRING_SECURITY_USER_NAME }}" >> $GITHUB_ENV
      #          aws elasticbeanstalk update-environment \
      #            --environment-name MissionSpringPremierenv-env \
      #            --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=SPRING_DATASOURCE_PASSWORD,Value=${{ secrets.SPRING_DATASOURCE_PASSWORD }} \
      #                              Namespace=aws:elasticbeanstalk:application:environment,OptionName=SPRING_DATASOURCE_USERNAME,Value=${{ secrets.SPRING_DATASOURCE_USERNAME }} \
      #                              Namespace=aws:elasticbeanstalk:application:environment,OptionName=SPRING_JWT_SECRET,Value=${{ secrets.SPRING_JWT_SECRET }} \
      #                              Namespace=aws:elasticbeanstalk:application:environment,OptionName=SPRING_SECURITY_USER_NAME,Value=${{ secrets.SPRING_SECURITY_USER_NAME }} \
      #                              Namespace=aws:elasticbeanstalk:application:environment,OptionName=SPRING_SECURITY_USER_PASSWORD,Value=${{ secrets.SPRING_SECURITY_USER_PASSWORD }}

#      - name: Create .env file
#        run: |
#          echo "Creating .env file..."
#          cd /var/app/current
#          cat > .env <<EOL
#          SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
#          SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
#          SPRING_JWT_SECRET=${{ secrets.SPRING_JWT_SECRET }}
#          SPRING_SECURITY_USER_NAME=${{ secrets.SPRING_SECURITY_USER_NAME }}
#          SPRING_SECURITY_USER_PASSWORD=${{ secrets.SPRING_SECURITY_USER_PASSWORD }}
#          EOL

      - name: Create .env on EB
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EB_HOST }}
          username: ${{ secrets.EB_USER }}
          key: ${{ secrets.EB_KEY }}
          port: 22
          script: |
            APP_DIR="/var/app/current"
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"
            cat > .env <<EOL
            SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            SPRING_JWT_SECRET=${{ secrets.SPRING_JWT_SECRET }}
            SPRING_SECURITY_USER_NAME=${{ secrets.SPRING_SECURITY_USER_NAME }}
            SPRING_SECURITY_USER_PASSWORD=${{ secrets.SPRING_SECURITY_USER_PASSWORD }}
            EOL
            chmod 600 .env
            echo ".env file created"

      # 8. 초기 배포 (CLI 직접 호출)
      - name: Initial Beanstalk Deploy (CLI)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Uploading artifact to S3..."
          aws s3 cp ./build/libs/${{ env.artifact }} s3://groom-mission-springpremier/mission_SpringPremier_env/${{ github.sha }}.zip
          
          echo "Creating application version..."
          aws elasticbeanstalk create-application-version \
          --application-name mission_SpringPremier_env \
          --version-label initial-${{ github.sha }} \
          --source-bundle S3Bucket=groom-mission-springpremier,S3Key=mission_SpringPremier_env/${{ github.sha }}.zip
          
          echo "Updating environment..."
          aws elasticbeanstalk update-environment \
          --environment-name MissionSpringPremierenv-env \
          --version-label initial-${{ github.sha }}

      # 9. 이후 배포 (Action 사용)
      - name: Beanstalk Deploy
        if: github.ref == 'refs/heads/main'
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: mission_SpringPremier_env
          environment_name: MissionSpringPremierenv-env
          version_label: github-action2-${{ steps.current-time.outputs.formattedTime }}-${{ github.sha }}
          region: ap-northeast-2
          deployment_package: ./build/libs/${{ env.artifact }}
          existing_bucket_name: groom-mission-springpremier
          use_existing_version_if_available: false
          wait_for_environment_recovery: 300
